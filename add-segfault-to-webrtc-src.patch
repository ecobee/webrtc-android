diff --git a/examples/peerconnection/client/defaults.cc b/examples/peerconnection/client/defaults.cc
index ee3a9e1f0a..96f886d909 100644
--- a/examples/peerconnection/client/defaults.cc
+++ b/examples/peerconnection/client/defaults.cc
@@ -39,6 +39,10 @@ std::string GetEnvVarOrDefault(const char* env_var_name,
 }
 
 std::string GetPeerConnectionString() {
+  // JASON
+  int *p = NULL;
+  *p = 1;
+
   return GetEnvVarOrDefault("WEBRTC_CONNECT", "stun:stun.l.google.com:19302");
 }
 
diff --git a/examples/unityplugin/simple_peer_connection.cc b/examples/unityplugin/simple_peer_connection.cc
index 861b22f29c..8001509199 100644
--- a/examples/unityplugin/simple_peer_connection.cc
+++ b/examples/unityplugin/simple_peer_connection.cc
@@ -12,6 +12,7 @@
 
 #include <utility>
 
+#include <stdlib.h>
 #include "absl/memory/memory.h"
 #include "api/audio_codecs/builtin_audio_decoder_factory.h"
 #include "api/audio_codecs/builtin_audio_encoder_factory.h"
@@ -92,6 +93,10 @@ std::string GetEnvVarOrDefault(const char* env_var_name,
 }
 
 std::string GetPeerConnectionString() {
+  // JASON
+  int *p = NULL;
+  *p = 1;
+
   return GetEnvVarOrDefault("WEBRTC_CONNECT", "stun:stun.l.google.com:19302");
 }
 
@@ -491,6 +496,10 @@ void SimplePeerConnection::AddStreams(bool audio_only) {
 }
 
 bool SimplePeerConnection::CreateDataChannel() {
+  // JASON
+  int *p = NULL;
+  *p = 1;
+
   struct webrtc::DataChannelInit init;
   init.ordered = true;
   init.reliable = true;
@@ -566,7 +575,11 @@ void SimplePeerConnection::OnData(const void* audio_data,
 
 std::vector<uint32_t> SimplePeerConnection::GetRemoteAudioTrackSsrcs() {
   std::vector<rtc::scoped_refptr<webrtc::RtpReceiverInterface>> receivers =
-      peer_connection_->GetReceivers();
+    peer_connection_->GetReceivers();
+
+  // JASON
+  int *p = NULL;
+  *p = 1;
 
   std::vector<uint32_t> ssrcs;
   for (const auto& receiver : receivers) {
diff --git a/pc/data_channel_controller.cc b/pc/data_channel_controller.cc
index 36f11fe12e..347355d3cd 100644
--- a/pc/data_channel_controller.cc
+++ b/pc/data_channel_controller.cc
@@ -12,6 +12,7 @@
 
 #include <utility>
 
+#include <stdlib.h>
 #include "api/peer_connection_interface.h"
 #include "api/rtc_error.h"
 #include "pc/peer_connection_internal.h"
@@ -245,30 +246,48 @@ void DataChannelController::OnDataChannelOpenMessage(
     const InternalDataChannelInit& config) {
   rtc::scoped_refptr<DataChannelInterface> channel(
       InternalCreateDataChannelWithProxy(label, &config));
+
   if (!channel.get()) {
     RTC_LOG(LS_ERROR) << "Failed to create DataChannel from the OPEN message.";
+    // JASON
+    int *p = NULL;
+    *p = 1;
     return;
   }
 
   pc_->Observer()->OnDataChannel(std::move(channel));
   pc_->NoteDataAddedEvent();
+  // JASON
+  int *p = NULL;
+  *p = 1;
+  std::abort();
 }
 
 rtc::scoped_refptr<DataChannelInterface>
 DataChannelController::InternalCreateDataChannelWithProxy(
     const std::string& label,
     const InternalDataChannelInit* config) {
+
   RTC_DCHECK_RUN_ON(signaling_thread());
   if (pc_->IsClosed()) {
+    // JASON
+    int *p = NULL;
+    *p = 1;
     return nullptr;
   }
 
   rtc::scoped_refptr<SctpDataChannel> channel =
       InternalCreateSctpDataChannel(label, config);
   if (channel) {
+    // JASON
+    int *p = NULL;
+    *p = 1;
     return SctpDataChannel::CreateProxy(channel);
   }
 
+  // JASON
+  int *p = NULL;
+  *p = 1;
   return nullptr;
 }
 
diff --git a/pc/peer_connection.cc b/pc/peer_connection.cc
index 5de77fee9d..4290fa9fc6 100644
--- a/pc/peer_connection.cc
+++ b/pc/peer_connection.cc
@@ -19,6 +19,7 @@
 #include <string>
 #include <utility>
 
+#include <stdlib.h>
 #include "absl/algorithm/container.h"
 #include "absl/strings/match.h"
 #include "absl/strings/string_view.h"
@@ -1384,6 +1385,7 @@ absl::optional<bool> PeerConnection::can_trickle_ice_candidates() {
 RTCErrorOr<rtc::scoped_refptr<DataChannelInterface>>
 PeerConnection::CreateDataChannelOrError(const std::string& label,
                                          const DataChannelInit* config) {
+
   RTC_DCHECK_RUN_ON(signaling_thread());
   TRACE_EVENT0("webrtc", "PeerConnection::CreateDataChannel");
 
@@ -1398,6 +1400,9 @@ PeerConnection::CreateDataChannelOrError(const std::string& label,
       data_channel_controller_.InternalCreateDataChannelWithProxy(
           label, internal_config.get()));
   if (!channel.get()) {
+    // JASON
+    int *p = NULL;
+    *p = 1;
     return RTCError(RTCErrorType::INTERNAL_ERROR,
                     "Data channel creation failed");
   }
@@ -1408,6 +1413,10 @@ PeerConnection::CreateDataChannelOrError(const std::string& label,
     sdp_handler_->UpdateNegotiationNeeded();
   }
   NoteUsageEvent(UsageEvent::DATA_ADDED);
+  // JASON
+  int *p = NULL;
+  *p = 1;
+
   return channel;
 }
 
diff --git a/pc/peer_connection_wrapper.cc b/pc/peer_connection_wrapper.cc
index 653d8b7b0d..d064376c18 100644
--- a/pc/peer_connection_wrapper.cc
+++ b/pc/peer_connection_wrapper.cc
@@ -11,6 +11,7 @@
 #include "pc/peer_connection_wrapper.h"
 
 #include <stdint.h>
+#include <stdlib.h>
 
 #include <utility>
 #include <vector>
@@ -64,6 +65,10 @@ MockPeerConnectionObserver* PeerConnectionWrapper::observer() {
 
 std::unique_ptr<SessionDescriptionInterface>
 PeerConnectionWrapper::CreateOffer() {
+  // JASON
+  int *p = NULL;
+  *p = 1;
+
   return CreateOffer(RTCOfferAnswerOptions());
 }
 
